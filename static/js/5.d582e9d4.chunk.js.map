{"version":3,"sources":["Components/ColumnMiddle/StickerSet.js","Utils/Animatior.js","Components/ColumnMiddle/StickersPickerHeader.js","Components/ColumnMiddle/StickersPicker.js","Components/ColumnMiddle/EmojiPickerButton.js"],"names":["StickerSet","nextProps","nextState","nextContext","this","props","info","theme","classes","onSelect","onMouseDown","onMouseEnter","title","items","stickers","map","x","i","className","classNames","stickerSetItem","key","sticker","id","data-sticker-id","onClick","Sticker","autoplay","blur","displaySize","STICKER_SMALL_DISPLAY_SIZE","preview","source","StickerSourceEnum","PICKER","React","Component","withStyles","backgroundColor","palette","background","paper","color","text","primary","width","height","padding","boxSizing","type","borderRadius","withTheme","Animator","duration","options","start","stopped","requestAnimationFrame","startAnim","timeStamp","end","draw","now","p","val","outSine","forEach","from","to","func","stop","cancelAnimationFrame","n","Math","sin","PI","StickersPickerHeader","onClientUpdateStickerSetPosition","update","position","setState","scrollToPosition","state","animator","anchorRef","scroll","scrollRef","current","anchor","anchorNode","ReactDOM","scrollFrom","scrollLeft","scrollTo","anchorFrom","Number","style","left","replace","anchorTo","ANIMATION_DURATION_200MS","abs","sign","handleWheel","event","deltaX","deltaY","handleSelect","indexOf","createRef","StickerStore","on","removeListener","prevProps","prevState","snapshot","PICKER_HEADER","openMedia","borderColor","ref","onWheel","accentBackgroundDark","borderStyle","accentStyles","StickersPicker","scrollTop","loadContent","stickerSets","sets","a","TdLibController","send","is_masks","result","promises","push","set_id","Promise","all","slicedSets","slice","headerStickers","reduce","set","length","setsLength","loadInViewContentOnScroll","loadInViewContent","loadInViewContentOnScrollEnd","inViewItems","item","itemsMap","get","node","topBorder","bottomBorder","offsetHeight","nodeTop","offsetTop","nodeBottom","clientHeight","store","FileStore","getStore","loadedSets","has","loadStickerSetContent","updatePosition","minDiff","scrollHeight","firstOffsetTop","pos","element","diff","clientUpdate","handleScroll","loadingChunk","loadChunk","finally","concatSets","concat","loadPreviewContent","stickerId","getStickers","find","loadStickerContent","getNeighborStickersFromSets","handleMouseEnter","currentTarget","dataset","mouseDown","mouseDownStickerId","previewStickerId","onPreview","handleMouseDown","Date","timestamp","showPreview","cancelSend","setTimeout","document","addEventListener","handleMouseUp","preventDefault","stopPropagation","removeEventListener","handleStickerSelect","handleSelectSet","Map","debounce","throttle","clear","el","onScroll","EmojiPickerButton","onClientUpdateChange","picker","handleButtonMouseEnter","buttonEnter","updatePicker","loadStickerSets","EMOJI_PICKER_TIMEOUT_MS","stickersPickerRef","reverse","loadStickerThumbnailContent","handleButtonMouseLeave","tryClosePicker","paperEnter","handlePaperMouseEnter","handlePaperMouseLeave","open","handleEmojiClick","tab","handleStickersClick","stickersPicker","handleStickerSend","handleStickerPreview","emojiPickerRef","ApplicationStore","LocalizationStore","t","i18n","search","notfound","skintext","categories","recent","people","nature","foods","activity","places","objects","symbols","flags","custom","showSkinTones","dark","native","isAppleDevice","overflowX","rel","href","iconButton","aria-label","onMouseLeave","pickerRoot","pickerRootOpened","headerButton","Boolean","StickerPreview","enhance","compose","margin","flex","zIndex","modal","shape","boxShadow","shadows","bottom","display","withTranslation"],"mappings":"icAgCMA,G,qMACoBC,EAAWC,EAAWC,GAAc,IAAD,EAC7BC,KAAKC,MAArBC,EAD6C,EAC7CA,KAER,OAHqD,EACvCC,QAEAN,EAAUM,OAIpBD,IAASL,EAAUK,O,+BAOjB,IAAD,EAC0DF,KAAKC,MAA5DG,EADH,EACGA,QAASF,EADZ,EACYA,KAAMG,EADlB,EACkBA,SAAUC,EAD5B,EAC4BA,YAAaC,EADzC,EACyCA,aAC9C,IAAKL,EAAM,OAAO,KAFb,IAIGM,EAAoBN,EAApBM,MAEFC,EAFsBP,EAAbQ,SAEQC,IAAI,SAACC,EAAGC,GAAJ,OACvB,yBACIC,UAAWC,IAAW,mBAAoBX,EAAQY,gBAClDC,IAAKL,EAAEM,QAAQC,GACfC,kBAAiBR,EAAEM,QAAQC,GAC3BE,QAAS,kBAAMhB,EAASO,IACxBL,aAAcA,EACdD,YAAaA,GACb,kBAACgB,EAAA,EAAD,CACIL,IAAKL,EAAEM,QAAQC,GACfD,QAASN,EACTW,UAAU,EACVC,MAAM,EACNC,YAAaC,KAA6B,EAC1CC,SAAO,EACPC,OAAQC,IAAkBC,YAKtC,OACI,yBAAKhB,UAAU,eACX,yBAAKA,UAAWC,IAAW,oBAAqBX,EAAQI,QACpD,8BAAOA,IAEX,yBAAKM,UAAU,uBAAuBL,Q,GA9C7BsB,IAAMC,YA0DhBC,MA3EA,SAAA9B,GAAK,MAAK,CACrBK,MAAO,CACH0B,gBAAiB/B,EAAMgC,QAAQC,WAAWC,MAC1CC,MAAOnC,EAAMgC,QAAQI,KAAKC,SAE9BxB,eAAgB,CACZyB,MAAOf,KACPgB,OAAQhB,KACRiB,QAAS,EACTC,UAAW,aACX,UAAW,CACPR,WAAmC,SAAvBjC,EAAMgC,QAAQU,KAAkB,UAAY,UACxDC,aAAc,MA+DQ,CAAEC,WAAW,GAAhCd,CAAwCrC,GCrCxCoD,E,WA7CX,WAAYC,GAAyB,IAAD,OAAdC,EAAc,uDAAJ,GAAI,yBASpCC,MAAQ,WACJ,EAAKC,SAAU,EACf,EAAKjC,GAAKkC,sBAAsB,EAAKC,YAXL,KAcpCA,UAAY,SAAAC,GAAc,IACdJ,EAAoB,EAApBA,MAAOF,EAAa,EAAbA,SAEf,EAAKE,MAAQI,EACb,EAAKC,IAAML,EAAQF,EACnB,EAAKQ,KAAKF,IAnBsB,KAsBpCE,KAAO,SAAAC,GAAQ,IACHN,EAAsC,EAAtCA,QAASH,EAA6B,EAA7BA,SAAUE,EAAmB,EAAnBA,MAAOD,EAAY,EAAZA,QAElC,IAAIE,EAAJ,CACIM,EAAMP,GAASF,IAAU,EAAKG,SAAU,GAE5C,IAAMO,GAAKD,EAAMP,GAASF,EACpBW,EAAMZ,EAASa,QAAQF,GAE7BT,EAAQY,QAAQ,SAAAlD,GAAM,IACVmD,EAAmBnD,EAAnBmD,KAAMC,EAAapD,EAAboD,IACdC,EAD2BrD,EAATqD,MACbF,GAAQC,EAAKD,GAAQH,KAG9B,EAAKzC,GAAKkC,sBAAsB,EAAKI,QApCL,KAuCpCS,KAAO,WACH,EAAKd,SAAU,EACfe,qBAAqB,EAAKhD,KAxC1BnB,KAAKkD,QAAUA,EACflD,KAAKiD,SAAWA,E,yDAGLmB,GACX,OAAOC,KAAKC,IAAKF,EAAIC,KAAKE,GAAM,O,wPCMxC,IAKMC,E,YACF,WAAYvE,GAAQ,IAAD,8BACf,4CAAMA,KAgBVwE,iCAAmC,SAAAC,GAAW,IAClCC,EAAaD,EAAbC,SAER,EAAKC,SAAS,CAAED,cApBD,EA6BnBE,iBAAmB,WAAO,IACdF,EAAa,EAAKG,MAAlBH,SADa,iBAEbI,EAFa,EAEbA,SAAUC,EAFG,EAEHA,UAEZC,EAJe,EAEQC,UAEJC,QACnBC,EAASJ,EAAUG,QACnBE,EAAaC,cAAqBF,GAElCG,EAAaN,EAAOO,WACpBC,EAAsB,GAAXd,EAAgB,IAE3Be,EAAaC,OAAON,EAAWO,MAAMC,KAAKC,QAAQ,KAAM,KACxDC,EAAsB,GAAXpB,EAEbI,GACAA,EAASb,OAEb,EAAKa,SAAW,IAAI/B,EAASgD,IAA0B,CACnD,CACIjC,KAAMwB,EACNvB,GAAIyB,EACJxB,KAAM,SAAA4B,GAAI,OAAKZ,EAAOO,WAAaK,IAEvC,CACI9B,KACIM,KAAK4B,IAAIF,EAAWL,GAAc,IAC5BK,EAA8C,IAAnC1B,KAAK6B,KAAKH,EAAWL,GAChCA,EACV1B,GAAI+B,EACJ9B,KAAM,SAAA4B,GAAI,OAAKR,EAAWO,MAAMC,KAAOA,EAAO,SAGtD,EAAKd,SAAS5B,SA7DC,EAgEnBgD,YAAc,SAAAC,GAAU,IACZlB,EADW,eACXA,UAEa,IAAjBkB,EAAMC,SACSnB,EAAUC,QAElBK,YAAcY,EAAME,SAtEhB,EA0EnBC,aAAe,SAAArF,GAAY,IAAD,EACS,EAAKjB,MAA5BS,EADc,EACdA,UAERL,EAHsB,EACJA,UAETK,EAAS8F,QAAQtF,KA1E1B,EAAK4D,MAAQ,CAAEH,SAAU,GAEzB,EAAKO,UAAYnD,IAAM0E,YACvB,EAAKzB,UAAYjD,IAAM0E,YANR,E,iFAUfC,IAAaC,GAAG,iCAAkC3G,KAAKyE,oC,6CAIvDiC,IAAaE,eAAe,iCAAkC5G,KAAKyE,oC,yCASpDoC,EAAWC,EAAWC,GACjCD,EAAUnC,WAAa3E,KAAK8E,MAAMH,UAClC3E,KAAK6E,qB,+BAuDH,IAAD,SACyB7E,KAAKC,MAA3BG,EADH,EACGA,QAEFK,EAHD,EACYC,SAEMC,IAAI,SAAAC,GAAC,OACxB,kBAACU,EAAA,EAAD,CACIL,IAAKL,EAAEM,QAAQC,GACfL,UAAU,iCACVI,QAASN,EACTW,UAAU,EACVC,MAAM,EACNC,YAAa,GACbE,SAAO,EACPC,OAAQC,IAAkBmF,cAC1BC,UAAW,kBAAM,EAAKV,aAAa3F,QAI3C,OACI,yBAAKE,UAAWC,IAAW,yBAA0BX,EAAQ8G,cACzD,yBAAKC,IAAKnH,KAAKkF,UAAWpE,UAAU,gCAAgCsG,QAASpH,KAAKmG,aAC9E,yBAAKrF,UAAU,gCAAgCL,GAC/C,yBACI0G,IAAKnH,KAAKgF,UACVlE,UAAWC,IAAW,gCAAiCX,EAAQiH,8B,GAxGpDtF,IAAMC,WAqH1BC,MA1HA,SAAA9B,GAAK,O,qVAAA,IACbmH,YAAYnH,GADC,GAEboH,YAAapH,KAwHL8B,CAAmBuC,G,sCC2OnBgD,G,mBArWX,WAAYvH,GAAQ,IAAD,8BACf,4CAAMA,KAwCVwH,UAAY,WACR,EAAKvC,UAAUC,QAAQsC,UAAY,GA1CpB,EA6CnBC,YA7CmB,sCA6CL,WAAOC,EAAaC,GAApB,qBAAAC,EAAA,yDACN,EAAK/C,MAAM6C,YADL,oDAGLC,EAHK,iCAIeE,IAAgBC,KAAK,CACtC,QAAS,0BACTC,UAAU,IANR,cAIAC,EAJA,OASAC,EAAW,GACjBD,EAAOL,KAAK9D,QAAQ,SAAAlD,GAChBsH,EAASC,KACLL,IAAgBC,KAAK,CACjB,QAAS,gBACTK,OAAQxH,EAAEO,QAdhB,UAmBOkH,QAAQC,IAAIJ,GAnBnB,QAmBNN,EAnBM,eAsBJW,EAAaX,EAAKY,MAAM,EAAG,GAC3BC,EAAiBb,EAAKc,OAAO,SAAC/G,EAASgH,GAIzC,OAHIA,EAAIjI,SAASkI,OAAS,GACtBjH,EAAQwG,KAAKQ,EAAIjI,SAAS,IAEvBiB,GACR,IACH,EAAKiD,SAAS,CACV+C,cACAC,KAAMW,EACNE,mBAEJ,EAAKI,WAAaN,EAAWK,OAlCnB,0CA7CK,0DAkFnBE,0BAA4B,WACxB,EAAKC,qBAnFU,EAsFnBC,6BAA+B,WAC3B,EAAKD,kBAAkB,MAvFR,EA0FnBA,kBAAoB,WAAkB,IAAjBpG,EAAgB,uDAAN,EACrBsC,EAAS,EAAKC,UAAUC,QAEtByC,EAAS,EAAK9C,MAAd8C,KAEFqB,EAAc,GACpBrB,EAAK9D,QAAQ,SAAAlD,GACT,IAAMsI,EAAO,EAAKC,SAASC,IAAIxI,EAAEO,IAC3BkI,EAAO/D,cAAqB4D,GAClC,GAAIG,EAAM,CACN,IAAMC,EAAYrE,EAAOwC,UAAY9E,EAC/B4G,EAAetE,EAAOwC,UAAYxC,EAAOuE,aAAe7G,EAExD8G,EAAUJ,EAAKK,UACfC,EAAaN,EAAKK,UAAYL,EAAKO,aAErCH,GAAWH,GAAaD,EAAKK,WAAaH,EAC1CN,EAAYd,KAAKvH,GACV+I,GAAcL,GAAaK,GAAcJ,EAChDN,EAAYd,KAAKvH,GACV6I,GAAWH,GAAaK,GAAcJ,GAC7CN,EAAYd,KAAKvH,MAK7BqI,EAAYnF,QAAQ,SAAAlD,GAChB,IAAMiJ,EAAQC,IAAUC,WACnB,EAAKC,WAAWC,IAAIrJ,EAAEO,MACvB,EAAK6I,WAAWrB,IAAI/H,EAAEO,GAAIP,EAAEO,IAC5B+I,YAAsBL,EAAOjJ,OAxHtB,EA6HnBuJ,eAAiB,WACb,IAAMlF,EAAS,EAAKC,UAAUC,QAEtByC,EAAS,EAAK9C,MAAd8C,KACJwC,EAAUnF,EAAOoF,aACjB1F,EAAW,EACX2F,EAAiB,EACrB1C,EAAK9D,QAAQ,SAAClD,EAAG2J,GACb,IAAMC,EAAU,EAAKrB,SAASC,IAAIxI,EAAEO,IACpC,GAAIqJ,EAAS,CACT,IAAMnB,EAAO/D,cAAqBkF,GAClC,GAAInB,EAAM,CACNiB,EAAyB,IAARC,EAAYlB,EAAKK,UAAYY,EAE9C,IAAMZ,EAAYL,EAAKK,UAAYY,EACnC,GAAIjB,GAAQK,GAAazE,EAAOwC,UAAW,CACvC,IAAMgD,EAAOpG,KAAK4B,IAAIhB,EAAOwC,UAAYiC,GACrCe,GAAQL,IACRA,EAAUK,EACV9F,EAAW4F,QAO/BzC,IAAgB4C,aAAa,CACzB,QAAS,iCACT/F,cAzJW,EA6JnBgG,aA7JmB,qBA6JJ,0CAAA9C,EAAA,wDAEX,EAAKmB,+BACL,EAAKmB,iBAEClF,EAAS,EAAKC,UAAUC,SAE1B,EAAKyF,aAPE,oDASPC,GAAY,EACZ5F,EAAOwC,UAAYxC,EAAOuE,cAAgBvE,EAAOoF,aAAe,MAChEQ,GAAY,GAGXA,EAdM,0CAeA,GAfA,YAkBmB,EAAK/F,MAA3B8C,EAlBG,EAkBHA,MAAMD,EAlBH,EAkBGA,aACEC,KAAKgB,SAAWhB,EAAKgB,OAnB1B,0DAqBX,EAAKgC,cAAe,EACd1C,EAAW,GACjBP,EAAYC,KAAKY,MAAM,EAAKK,WAAY,EAAKA,WAAa,GAAG/E,QAAQ,SAAAlD,GACjEsH,EAASC,KACLL,IAAgBC,KAAK,CACjB,QAAS,gBACTK,OAAQxH,EAAEO,QA3BX,UAgCUkH,QAAQC,IAAIJ,GAAU4C,QAAQ,kBAAO,EAAKF,cAAe,IAhCnE,QAgCL3C,EAhCK,OAkCX,EAAKY,YAAcZ,EAAOW,OACtBmC,EAAanD,EAAKoD,OAAO/C,GAC7B,EAAKrD,SAAS,CAAEgD,KAAMmD,IApCX,0CA7JI,EAoMnBE,mBAAqB,SAAAC,GAAc,IACvBtD,EAAS,EAAK9C,MAAd8C,KAEF1G,EAAUiK,YAAYvD,GAAMwD,KAAK,SAAAxK,GAAC,OAAIA,EAAEM,QAAQC,KAAO+J,IAC7D,GAAKhK,EAAL,CAEA,IAAM2I,EAAQC,IAAUC,WACxBsB,YAAmBxB,EAAO3I,EAAS,MAGXoK,YAA4BpK,EAAS0G,EADtC,GAEP9D,QAAQ,SAAAlD,GACpByK,YAAmBxB,EAAOjJ,EAAG,UAhNlB,EAoNnB2K,iBAAmB,SAAAnF,GACf,IAAM8E,EAAYvF,OAAOS,EAAMoF,cAAcC,QAAQP,WACrD,GAAKA,GAEA,EAAKQ,UAAV,CAEI,EAAKC,qBAAuBT,IAC5B,EAAKS,mBAAqB,MAE9B,EAAK/G,SAAS,CAAEgH,iBAAkBV,IAClC,EAAKD,mBAAmBC,GAVA,IAYhBW,EAAc,EAAK5L,MAAnB4L,UACAjE,EAAS,EAAK9C,MAAd8C,KAGRiE,EADgBV,YAAYvD,GAAMwD,KAAK,SAAAxK,GAAC,OAAIA,EAAEM,QAAQC,KAAO+J,OAnO9C,EAuOnBY,gBAAkB,SAAA1F,GACd,IAAM8E,EAAYvF,OAAOS,EAAMoF,cAAcC,QAAQP,WACrD,GAAKA,EAAL,CAEA,EAAKS,mBAAqBT,EAC1B,IAAMxH,EAAMqI,KAAKrI,MAuBjB,OArBA,EAAKkB,SAAS,CAAEgH,iBAAkBV,EAAWc,UAAWtI,EAAKuI,aAAa,EAAOC,YAAY,IAC7FC,WAAW,WACe,EAAKrH,MAAnBkH,YACUtI,GACd,EAAKkB,SAAS,CAAEqH,aAAa,EAAMC,YAAY,GAAQ,WAAO,IAClDL,EAAc,EAAK5L,MAAnB4L,UACAjE,EAAS,EAAK9C,MAAd8C,KAGRiE,EADgBV,YAAYvD,GAAMwD,KAAK,SAAAxK,GAAC,OAAIA,EAAEM,QAAQC,KAAO+J,QAItE,KAEH,EAAKD,mBAAmBC,GAExB,EAAKQ,WAAY,EACjBU,SAASC,iBAAiB,UAAW,EAAKC,eAE1ClG,EAAMmG,iBACNnG,EAAMoG,mBACC,IAnQQ,EAsQnBF,cAAgB,WACZ,EAAK1H,SAAS,CAAEgH,iBAAkB,EAAGI,UAAW,EAAGC,aAAa,KAIhEJ,EAFsB,EAAK5L,MAAnB4L,WAEE,MAEV,EAAKH,WAAY,EACjBU,SAASK,oBAAoB,UAAW,EAAKH,gBA9Q9B,EAiRnBI,oBAAsB,SAAAxL,GAAY,IACtBb,EAAa,EAAKJ,MAAlBI,SACe,EAAKyE,MAApBoH,YAIR7L,EAASa,IAvRM,EA0RnByL,gBA1RmB,sCA0RD,WAAMhI,GAAN,iCAAAkD,EAAA,0DACgB,EAAK/C,MAA3B8C,EADM,EACNA,KAAMD,EADA,EACAA,YADA,iBAENzC,EAFM,EAENA,YAEJP,EAAWiD,EAAKgB,QAJN,iBAKJ4B,EAAU,EAAKrB,SAASC,IAAIxB,EAAKjD,GAAUxD,OAEvCkI,EAAO/D,cAAqBkF,MAEftF,EAAUC,QAClBsC,UAAY4B,EAAKK,WAVtB,4BAaH/E,EAAWgD,EAAYC,KAAKgB,QAbzB,qBAcN,EAAKgC,aAdC,sDAeNjD,EAAYC,KAAKgB,SAAWhB,EAAKgB,OAf3B,0DAiBV,EAAKgC,cAAe,EACd1C,EAAW,GACjBP,EAAYC,KAAKY,MAAM,EAAKK,WAAYlE,EAAW,GAAGb,QAAQ,SAAAlD,GAC1DsH,EAASC,KACLL,IAAgBC,KAAK,CACjB,QAAS,gBACTK,OAAQxH,EAAEO,QAvBZ,UA4BWkH,QAAQC,IAAIJ,GAAU4C,QAAQ,kBAAO,EAAKF,cAAe,IA5BpE,QA4BJ3C,EA5BI,OA8BV,EAAKY,YAAcZ,EAAOW,OACtBmC,EAAanD,EAAKoD,OAAO/C,GAC7B,EAAKrD,SAAS,CAAEgD,KAAMmD,GAAc,WAC5BpG,EAAWoG,EAAWnC,QACtB,EAAK+D,gBAAgBhI,KAlCnB,0CA1RC,sDAGf,EAAKO,UAAYnD,IAAM0E,YACvB,EAAK0C,SAAW,IAAIyD,IACpB,EAAK5C,WAAa,IAAI4C,IAEtB,EAAK9H,MAAQ,CACT6C,YAAa,KACbC,KAAM,GACNa,eAAgB,GAChB9D,SAAU,GAGd,EAAKqE,6BAA+B6D,YAAS,EAAK7D,6BAA8B,KAChF,EAAKF,0BAA4BgE,YAAS,EAAKhE,0BAA2B,KAC1E,EAAKqB,eAAiB2C,YAAS,EAAK3C,eAAgB,KAhBrC,E,mFAmBGtK,EAAWC,EAAWC,GAAc,IAAD,EACAC,KAAK8E,MAAlDH,EAD6C,EAC7CA,SAAUgD,EADmC,EACnCA,YAAaC,EADsB,EACtBA,KAAMqE,EADgB,EAChBA,YAErC,OAAInM,EAAU6H,cAAgBA,IAI1B7H,EAAU8H,OAASA,IAInB9H,EAAUmM,cAAgBA,GAI1BnM,EAAU6E,WAAaA,M,+BAgSrB,IAAD,SACyC3E,KAAK8E,MAA3C6C,EADH,EACGA,YAAaC,EADhB,EACgBA,KAAMa,EADtB,EACsBA,eAC3B,IAAKd,EAAa,OAAO,KAEzB,IAAKC,EAAM,OAAO,KAClB,IAAKA,EAAKgB,OAAQ,OAAO,KAEzB5I,KAAKmJ,SAAS4D,QACd,IAAMtM,EAAQmH,EAAKjH,IAAI,SAAAC,GAAC,OACpB,kBAAC,EAAD,CACIK,IAAKL,EAAEO,GACPgG,IAAK,SAAA6F,GAAE,OAAI,EAAK7D,SAASR,IAAI/H,EAAEO,GAAI6L,IACnC9M,KAAMU,EACNP,SAAU,EAAKqM,oBACfpM,YAAa,EAAKwL,gBAClBvL,aAAc,EAAKgL,qBAI3B,OACI,yBAAKzK,UAAU,mBACX,kBAAC,EAAD,CAAsBT,SAAUL,KAAK2M,gBAAiBjM,SAAU+H,IAChE,yBAAKtB,IAAKnH,KAAKkF,UAAWpE,UAAU,yBAAyBmM,SAAUjN,KAAK2K,cACvElK,Q,GA1VQsB,IAAMC,Y,iBCiC7BkL,G,mBACF,WAAYjN,GAAQ,IAAD,8BACf,4CAAMA,KAqBVkN,qBAAuB,SAAAzI,GACnB,EAAK0I,OAAS,MAvBC,EA0BnBC,uBAAyB,SAAAjH,GACrB,EAAKkH,aAAc,EACnBnB,WAAW,WACF,EAAKmB,cAEV,EAAKC,cAAa,GAClB,EAAKC,oBACNC,MAjCY,EAoCnBD,gBApCmB,qBAoCD,gCAAA3F,EAAA,yDACV,EAAKD,KADK,iEAGWE,IAAgBC,KAAK,CAC1C,QAAS,0BACTC,UAAU,IALA,cAGd,EAAKL,YAHS,OAQRO,EAAW,GACjB,EAAKP,YAAYC,KAAK9D,QAAQ,SAAAlD,GAC1BsH,EAASC,KACLL,IAAgBC,KAAK,CACjB,QAAS,gBACTK,OAAQxH,EAAEO,QAbR,SAkBIkH,QAAQC,IAAIJ,GAlBhB,OAkBd,EAAKN,KAlBS,OAoBRyB,EAAO,EAAKqE,kBAAkBvI,QAE9B0E,EAAQC,IAAUC,WACJ,EAAKnC,KAAKY,MAAM,EAAG,GAAGmF,UAC9B7J,QAAQ,SAAAlD,GAChBsJ,YAAsBL,EAAOjJ,GAC7ByI,EAAKW,WAAWrB,IAAI/H,EAAEO,GAAIP,EAAEO,MAGR,EAAKyG,KAAKc,OAAO,SAAChI,EAAUiI,GAIhD,OAHIA,EAAIjI,SAASkI,OAAS,GACtBlI,EAASyH,KAAKQ,EAAIjI,SAAS,IAExBA,GACR,IACaoD,QAAQ,SAAAlD,GACpBgN,YAA4B/D,EAAOjJ,KApCzB,0CApCC,EA4EnBiN,uBAAyB,WACrB,EAAKP,aAAc,EACnBnB,WAAW,WACP,EAAK2B,kBACNL,MAhFY,EAmFnBK,eAAiB,WAAO,IACZ5M,EAAY,EAAK4D,MAAjB5D,QACJ,EAAK6M,YAAc,EAAKT,aAAepM,GAE3C,EAAKqM,cAAa,IAvFH,EA0FnBS,sBAAwB,WACpB,EAAKD,YAAa,GA3FH,EA8FnBE,sBAAwB,WACpB,EAAKF,YAAa,EAClB5B,WAAW,WACP,EAAK2B,kBACNL,MAlGY,EAqGnBF,aAAe,SAAAW,GACX,EAAKtJ,SAAS,CAAEsJ,UAtGD,EAyGnBC,iBAAmB,WACf,EAAKvJ,SAAS,CAAEwJ,IAAK,KA1GN,EA6GnBC,oBAAsB,WAClB,IAAMC,EAAiB,EAAKZ,kBAAkBvI,QACtCiJ,EAAQ,EAAKtJ,MAAbsJ,IAERE,EAAe5G,YAAY,EAAKC,YAAa,EAAKC,MAElD,EAAKhD,SAAS,CAAEwJ,IAAK,IACT,IAARA,GACAE,EAAe7G,aArHJ,EAyHnB8G,kBAAoB,SAAArN,GACXA,IAEL4G,IAAgB4C,aAAa,CACzB,QAAS,0BACTxJ,YAGJ,EAAKqM,cAAa,KAjIH,EAoInBiB,qBAAuB,SAAAtN,GACnB,EAAK0D,SAAS,CAAE1D,YAChB4G,IAAgB4C,aAAa,CACzB,QAAS,6BACTxJ,YAGCA,GACD,EAAK4M,kBAzIT,EAAKhJ,MAAQ,CACToJ,MAAM,EACNE,IAAK,GAGT,EAAKK,eAAiB1M,IAAM0E,YAC5B,EAAKiH,kBAAoB3L,IAAM0E,YAThB,E,iFAafiI,IAAiB/H,GAAG,0BAA2B3G,KAAKmN,sBACpDwB,IAAkBhI,GAAG,6BAA8B3G,KAAKmN,wB,6CAIxDuB,IAAiB9H,eAAe,0BAA2B5G,KAAKmN,sBAChEwB,IAAkB/H,eAAe,6BAA8B5G,KAAKmN,wB,+BA6H9D,IAAD,EACyBnN,KAAKC,MAA3BG,EADH,EACGA,QAASD,EADZ,EACYA,MAAOyO,EADnB,EACmBA,EADnB,EAE0B5O,KAAK8E,MAA5BoJ,EAFH,EAEGA,KAAME,EAFT,EAESA,IAAKlN,EAFd,EAEcA,QAEnB,GAAIgN,IAASlO,KAAKoN,OAAQ,CACtB,IAAMyB,EAAO,CACTC,OAAQF,EAAE,UACVG,SAAUH,EAAE,iBACZI,SAAUJ,EAAE,yBACZK,WAAY,CACRH,OAAQF,EAAE,iBACVM,OAAQN,EAAE,UACVO,OAAQP,EAAE,iBACVQ,OAAQR,EAAE,iBACVS,MAAOT,EAAE,aACTU,SAAUV,EAAE,YACZW,OAAQX,EAAE,gBACVY,QAASZ,EAAE,WACXa,QAASb,EAAE,WACXc,MAAOd,EAAE,SACTe,OAAQf,EAAE,YAIlB5O,KAAKoN,OACD,kBAAC,IAAD,CACIjG,IAAKnH,KAAKyO,eACV9F,IAAI,QACJsD,aAAa,EACb2D,eAAe,EACfvP,SAAUL,KAAKC,MAAMI,SACrBiC,MAAOnC,EAAMgC,QAAQK,QAAQqN,KAC7BhB,KAAMA,EACNiB,OAAQC,cACRnK,MAAO,CAAEnD,MAAO,IAAKuN,UAAW,YAIxChQ,KAAKsO,eACD,kBAAC,EAAD,CACInH,IAAKnH,KAAK0N,kBACVrN,SAAUL,KAAKuO,kBACf1C,UAAW7L,KAAKwO,uBAK5B,OACI,oCACI,0BACIyB,IAAI,aACJpN,KAAK,WACLqN,KAA6B,SAAvB/P,EAAMgC,QAAQU,KAAkB,sBAAwB,yBAElE,kBAAC,IAAD,CACI/B,UAAWV,EAAQ+P,WACnBC,aAAW,WACX7P,aAAcP,KAAKqN,uBACnBgD,aAAcrQ,KAAK6N,wBACnB,kBAAC,IAAD,OAEJ,yBACI/M,UAAWC,IAAWX,EAAQkQ,WAAT,eAAwBlQ,EAAQmQ,iBAAmBrC,IACxE3N,aAAcP,KAAKgO,sBACnBqC,aAAcrQ,KAAKiO,uBACnB,yBAAKnN,UAAU,uBACX,kBAAC,IAAD,CACIwB,MAAe,IAAR8L,EAAY,UAAY,UAC/BtN,UAAWV,EAAQoQ,aACnBnP,QAASrB,KAAKmO,kBACbS,EAAE,UAEP,kBAAC,IAAD,CACItM,MAAe,IAAR8L,EAAY,UAAY,UAC/BtN,UAAWV,EAAQoQ,aACnBnP,QAASrB,KAAKqO,qBACbO,EAAE,cAGX,yBAAK9N,UAAWC,IAAW,uBAAwB,CAAE,gCAAyC,IAARqN,KACjFpO,KAAKoN,OACLpN,KAAKsO,gBAETmC,QAAQvP,IAAY,kBAACwP,EAAA,EAAD,CAAgBxP,QAASA,U,GApOlCa,IAAMC,YA2OhC2O,EAAUC,YACZ3O,IArQW,SAAA9B,GAAK,MAAK,CACrBgQ,WAAY,CACRU,OAAQ,WAEZL,aAAc,CACV1N,aAAc,EACdgO,KAAM,OAEVR,WAAY,CACRS,OAAQ5Q,EAAM4Q,OAAOC,MACrBvO,MAAO,IACPuN,UAAW,SACX9N,gBAAiB/B,EAAMgC,QAAQC,WAAWC,MAC1CC,MAAOnC,EAAMgC,QAAQI,KAAKC,QAC1BM,aAAc3C,EAAM8Q,MAAMnO,aAC1BoO,UAAW/Q,EAAMgR,QAAQ,GACzBxM,SAAU,WACVyM,OAAQ,GACRC,QAAS,QAEbd,iBAAkB,CACdc,QAAS,WAgPM,CAAEtO,WAAW,IAChCuO,eAGWX,YAAQzD","file":"static/js/5.d582e9d4.chunk.js","sourcesContent":["/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Sticker, { StickerSourceEnum } from '../Message/Media/Sticker';\nimport { STICKER_SMALL_DISPLAY_SIZE } from '../../Constants';\nimport './StickerSet.css';\n\nconst styles = theme => ({\n    title: {\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.primary\n    },\n    stickerSetItem: {\n        width: STICKER_SMALL_DISPLAY_SIZE,\n        height: STICKER_SMALL_DISPLAY_SIZE,\n        padding: 3,\n        boxSizing: 'border-box',\n        '&:hover': {\n            background: theme.palette.type === 'dark' ? '#303030' : '#f4f4f4',\n            borderRadius: 6\n        }\n    }\n});\n\nclass StickerSet extends React.Component {\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { info, theme } = this.props;\n\n        if (theme !== nextProps.theme) {\n            return true;\n        }\n\n        if (info !== nextProps.info) {\n            return true;\n        }\n\n        return false;\n    }\n\n    render() {\n        const { classes, info, onSelect, onMouseDown, onMouseEnter } = this.props;\n        if (!info) return null;\n\n        const { title, stickers } = info;\n\n        const items = stickers.map((x, i) => (\n            <div\n                className={classNames('sticker-set-item', classes.stickerSetItem)}\n                key={x.sticker.id}\n                data-sticker-id={x.sticker.id}\n                onClick={() => onSelect(x)}\n                onMouseEnter={onMouseEnter}\n                onMouseDown={onMouseDown}>\n                <Sticker\n                    key={x.sticker.id}\n                    sticker={x}\n                    autoplay={false}\n                    blur={false}\n                    displaySize={STICKER_SMALL_DISPLAY_SIZE - 6}\n                    preview\n                    source={StickerSourceEnum.PICKER}\n                />\n            </div>\n        ));\n\n        return (\n            <div className='sticker-set'>\n                <div className={classNames('sticker-set-title', classes.title)}>\n                    <span>{title}</span>\n                </div>\n                <div className='sticker-set-content'>{items}</div>\n            </div>\n        );\n    }\n}\n\nStickerSet.propTypes = {\n    info: PropTypes.object.isRequired,\n    onSelect: PropTypes.func.isRequired,\n    onMouseDown: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles, { withTheme: true })(StickerSet);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nclass Animator {\n    constructor(duration, options = []) {\n        this.options = options;\n        this.duration = duration;\n    }\n\n    static outSine(n) {\n        return Math.sin((n * Math.PI) / 2);\n    }\n\n    start = () => {\n        this.stopped = false;\n        this.id = requestAnimationFrame(this.startAnim);\n    };\n\n    startAnim = timeStamp => {\n        const { start, duration } = this;\n\n        this.start = timeStamp;\n        this.end = start + duration;\n        this.draw(timeStamp);\n    };\n\n    draw = now => {\n        const { stopped, duration, start, options } = this;\n\n        if (stopped) return;\n        if (now - start >= duration) this.stopped = true;\n\n        const p = (now - start) / duration;\n        const val = Animator.outSine(p);\n\n        options.forEach(x => {\n            const { from, to, func } = x;\n            func(from + (to - from) * val);\n        });\n\n        this.id = requestAnimationFrame(this.draw);\n    };\n\n    stop = () => {\n        this.stopped = true;\n        cancelAnimationFrame(this.id);\n    };\n}\n\nexport default Animator;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport Animator from '../../Utils/Animatior';\nimport Sticker from './../Message/Media/Sticker';\nimport { accentStyles, borderStyle } from '../Theme';\nimport { ANIMATION_DURATION_200MS } from '../../Constants';\nimport { StickerSourceEnum } from '../Message/Media/Sticker';\nimport StickerStore from '../../Stores/StickerStore';\nimport './StickersPickerHeader.css';\n\nconst styles = theme => ({\n    ...borderStyle(theme),\n    ...accentStyles(theme)\n});\n\nclass StickersPickerHeader extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = { position: 0 };\n\n        this.scrollRef = React.createRef();\n        this.anchorRef = React.createRef();\n    }\n\n    componentDidMount() {\n        StickerStore.on('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    componentWillUnmount() {\n        StickerStore.removeListener('clientUpdateStickerSetPosition', this.onClientUpdateStickerSetPosition);\n    }\n\n    onClientUpdateStickerSetPosition = update => {\n        const { position } = update;\n\n        this.setState({ position });\n    };\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if (prevState.position !== this.state.position) {\n            this.scrollToPosition();\n        }\n    }\n\n    scrollToPosition = () => {\n        const { position } = this.state;\n        const { animator, anchorRef, scrollRef } = this;\n\n        const scroll = scrollRef.current;\n        const anchor = anchorRef.current;\n        const anchorNode = ReactDOM.findDOMNode(anchor);\n\n        const scrollFrom = scroll.scrollLeft;\n        const scrollTo = position * 44 - 147;\n\n        const anchorFrom = Number(anchorNode.style.left.replace('px', ''));\n        const anchorTo = position * 44;\n\n        if (animator) {\n            animator.stop();\n        }\n        this.animator = new Animator(ANIMATION_DURATION_200MS, [\n            {\n                from: scrollFrom,\n                to: scrollTo,\n                func: left => (scroll.scrollLeft = left)\n            },\n            {\n                from:\n                    Math.abs(anchorTo - anchorFrom) > 338\n                        ? anchorTo - Math.sign(anchorTo - anchorFrom) * 338\n                        : anchorFrom,\n                to: anchorTo,\n                func: left => (anchorNode.style.left = left + 'px')\n            }\n        ]);\n        this.animator.start();\n    };\n\n    handleWheel = event => {\n        const { scrollRef } = this;\n\n        if (event.deltaX === 0) {\n            const scroll = scrollRef.current;\n\n            scroll.scrollLeft += event.deltaY;\n        }\n    };\n\n    handleSelect = sticker => {\n        const { stickers, onSelect } = this.props;\n\n        onSelect(stickers.indexOf(sticker));\n    };\n\n    render() {\n        const { classes, stickers } = this.props;\n\n        const items = stickers.map(x => (\n            <Sticker\n                key={x.sticker.id}\n                className='stickers-picker-header-sticker'\n                sticker={x}\n                autoplay={false}\n                blur={false}\n                displaySize={32}\n                preview\n                source={StickerSourceEnum.PICKER_HEADER}\n                openMedia={() => this.handleSelect(x)}\n            />\n        ));\n\n        return (\n            <div className={classNames('stickers-picker-header', classes.borderColor)}>\n                <div ref={this.scrollRef} className='stickers-picker-header-scroll' onWheel={this.handleWheel}>\n                    <div className='stickers-picker-header-items'>{items}</div>\n                    <div\n                        ref={this.anchorRef}\n                        className={classNames('stickers-picker-header-anchor', classes.accentBackgroundDark)}\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPickerHeader.propTypes = {\n    stickers: PropTypes.array.isRequired,\n    onSelect: PropTypes.func.isRequired\n};\n\nexport default withStyles(styles)(StickersPickerHeader);\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport StickerSet from './StickerSet';\nimport StickersPickerHeader from './StickersPickerHeader';\nimport { debounce, throttle } from '../../Utils/Common';\nimport { loadStickerContent, loadStickerSetContent } from '../../Utils/File';\nimport { getNeighborStickersFromSets, getStickers } from '../../Utils/Media';\nimport FileStore from '../../Stores/FileStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './StickersPicker.css';\n\nclass StickersPicker extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.scrollRef = React.createRef();\n        this.itemsMap = new Map();\n        this.loadedSets = new Map();\n\n        this.state = {\n            stickerSets: null,\n            sets: [],\n            headerStickers: [],\n            position: 0\n        };\n\n        this.loadInViewContentOnScrollEnd = debounce(this.loadInViewContentOnScrollEnd, 100);\n        this.loadInViewContentOnScroll = throttle(this.loadInViewContentOnScroll, 2000);\n        this.updatePosition = throttle(this.updatePosition, 250);\n    }\n\n    shouldComponentUpdate(nextProps, nextState, nextContext) {\n        const { position, stickerSets, sets, showPreview } = this.state;\n\n        if (nextState.stickerSets !== stickerSets) {\n            return true;\n        }\n\n        if (nextState.sets !== sets) {\n            return true;\n        }\n\n        if (nextState.showPreview !== showPreview) {\n            return true;\n        }\n\n        if (nextState.position !== position) {\n            return true;\n        }\n\n        return false;\n    }\n\n    scrollTop = () => {\n        this.scrollRef.current.scrollTop = 0;\n    };\n\n    loadContent = async (stickerSets, sets) => {\n        if (this.state.stickerSets) return;\n\n        if (!sets) {\n            const result = await TdLibController.send({\n                '@type': 'getInstalledStickerSets',\n                is_masks: false\n            });\n\n            const promises = [];\n            result.sets.forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            sets = await Promise.all(promises);\n        }\n\n        const slicedSets = sets.slice(0, 5);\n        const headerStickers = sets.reduce((preview, set) => {\n            if (set.stickers.length > 0) {\n                preview.push(set.stickers[0]);\n            }\n            return preview;\n        }, []);\n        this.setState({\n            stickerSets,\n            sets: slicedSets,\n            headerStickers\n        });\n        this.setsLength = slicedSets.length;\n    };\n\n    loadInViewContentOnScroll = () => {\n        this.loadInViewContent();\n    };\n\n    loadInViewContentOnScrollEnd = () => {\n        this.loadInViewContent(400);\n    };\n\n    loadInViewContent = (padding = 0) => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n\n        const inViewItems = [];\n        sets.forEach(x => {\n            const item = this.itemsMap.get(x.id);\n            const node = ReactDOM.findDOMNode(item);\n            if (node) {\n                const topBorder = scroll.scrollTop - padding;\n                const bottomBorder = scroll.scrollTop + scroll.offsetHeight + padding;\n\n                const nodeTop = node.offsetTop;\n                const nodeBottom = node.offsetTop + node.clientHeight;\n\n                if (nodeTop >= topBorder && node.offsetTop <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeBottom >= topBorder && nodeBottom <= bottomBorder) {\n                    inViewItems.push(x);\n                } else if (nodeTop <= topBorder && nodeBottom >= bottomBorder) {\n                    inViewItems.push(x);\n                }\n            }\n        });\n\n        inViewItems.forEach(x => {\n            const store = FileStore.getStore();\n            if (!this.loadedSets.has(x.id)) {\n                this.loadedSets.set(x.id, x.id);\n                loadStickerSetContent(store, x);\n            }\n        });\n    };\n\n    updatePosition = () => {\n        const scroll = this.scrollRef.current;\n\n        const { sets } = this.state;\n        let minDiff = scroll.scrollHeight;\n        let position = 0;\n        let firstOffsetTop = 0;\n        sets.forEach((x, pos) => {\n            const element = this.itemsMap.get(x.id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    firstOffsetTop = pos === 0 ? node.offsetTop : firstOffsetTop;\n\n                    const offsetTop = node.offsetTop - firstOffsetTop;\n                    if (node && offsetTop <= scroll.scrollTop) {\n                        const diff = Math.abs(scroll.scrollTop - offsetTop);\n                        if (diff <= minDiff) {\n                            minDiff = diff;\n                            position = pos;\n                        }\n                    }\n                }\n            }\n        });\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSetPosition',\n            position\n        });\n    };\n\n    handleScroll = async () => {\n        //this.loadInViewContentOnScroll();\n        this.loadInViewContentOnScrollEnd();\n        this.updatePosition();\n\n        const scroll = this.scrollRef.current;\n\n        if (this.loadingChunk) return;\n\n        let loadChunk = false;\n        if (scroll.scrollTop + scroll.offsetHeight >= scroll.scrollHeight - 400) {\n            loadChunk = true;\n        }\n\n        if (!loadChunk) {\n            return false;\n        }\n\n        const { sets, stickerSets } = this.state;\n        if (stickerSets.sets.length === sets.length) return;\n\n        this.loadingChunk = true;\n        const promises = [];\n        stickerSets.sets.slice(this.setsLength, this.setsLength + 5).forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n        this.setsLength += result.length;\n        let concatSets = sets.concat(result);\n        this.setState({ sets: concatSets });\n    };\n\n    loadPreviewContent = stickerId => {\n        const { sets } = this.state;\n\n        const sticker = getStickers(sets).find(x => x.sticker.id === stickerId);\n        if (!sticker) return;\n\n        const store = FileStore.getStore();\n        loadStickerContent(store, sticker, null);\n\n        const stickersPerRow = 5;\n        const preloadStickers = getNeighborStickersFromSets(sticker, sets, stickersPerRow);\n        preloadStickers.forEach(x => {\n            loadStickerContent(store, x, null);\n        });\n    };\n\n    handleMouseEnter = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        if (!this.mouseDown) return;\n\n        if (this.mouseDownStickerId !== stickerId) {\n            this.mouseDownStickerId = null;\n        }\n        this.setState({ previewStickerId: stickerId });\n        this.loadPreviewContent(stickerId);\n\n        const { onPreview } = this.props;\n        const { sets } = this.state;\n\n        const sticker = getStickers(sets).find(x => x.sticker.id === stickerId);\n        onPreview(sticker);\n    };\n\n    handleMouseDown = event => {\n        const stickerId = Number(event.currentTarget.dataset.stickerId);\n        if (!stickerId) return;\n\n        this.mouseDownStickerId = stickerId;\n        const now = Date.now();\n\n        this.setState({ previewStickerId: stickerId, timestamp: now, showPreview: false, cancelSend: false });\n        setTimeout(() => {\n            const { timestamp } = this.state;\n            if (timestamp === now) {\n                this.setState({ showPreview: true, cancelSend: true }, () => {\n                    const { onPreview } = this.props;\n                    const { sets } = this.state;\n\n                    const sticker = getStickers(sets).find(x => x.sticker.id === stickerId);\n                    onPreview(sticker);\n                });\n            }\n        }, 500);\n\n        this.loadPreviewContent(stickerId);\n\n        this.mouseDown = true;\n        document.addEventListener('mouseup', this.handleMouseUp);\n\n        event.preventDefault();\n        event.stopPropagation();\n        return false;\n    };\n\n    handleMouseUp = () => {\n        this.setState({ previewStickerId: 0, timestamp: 0, showPreview: false });\n\n        const { onPreview } = this.props;\n\n        onPreview(null);\n\n        this.mouseDown = false;\n        document.removeEventListener('mouseup', this.handleMouseUp);\n    };\n\n    handleStickerSelect = sticker => {\n        const { onSelect } = this.props;\n        const { cancelSend } = this.state;\n\n        if (cancelSend) return;\n\n        onSelect(sticker);\n    };\n\n    handleSelectSet = async position => {\n        const { sets, stickerSets } = this.state;\n        const { scrollRef } = this;\n\n        if (position < sets.length) {\n            const element = this.itemsMap.get(sets[position].id);\n            if (element) {\n                const node = ReactDOM.findDOMNode(element);\n                if (node) {\n                    const scroll = scrollRef.current;\n                    scroll.scrollTop = node.offsetTop;\n                }\n            }\n        } else if (position < stickerSets.sets.length) {\n            if (this.loadingChunk) return;\n            if (stickerSets.sets.length === sets.length) return;\n\n            this.loadingChunk = true;\n            const promises = [];\n            stickerSets.sets.slice(this.setsLength, position + 1).forEach(x => {\n                promises.push(\n                    TdLibController.send({\n                        '@type': 'getStickerSet',\n                        set_id: x.id\n                    })\n                );\n            });\n\n            const result = await Promise.all(promises).finally(() => (this.loadingChunk = false));\n\n            this.setsLength += result.length;\n            let concatSets = sets.concat(result);\n            this.setState({ sets: concatSets }, () => {\n                if (position < concatSets.length) {\n                    this.handleSelectSet(position);\n                }\n            });\n        }\n    };\n\n    render() {\n        const { stickerSets, sets, headerStickers } = this.state;\n        if (!stickerSets) return null;\n\n        if (!sets) return null;\n        if (!sets.length) return null;\n\n        this.itemsMap.clear();\n        const items = sets.map(x => (\n            <StickerSet\n                key={x.id}\n                ref={el => this.itemsMap.set(x.id, el)}\n                info={x}\n                onSelect={this.handleStickerSelect}\n                onMouseDown={this.handleMouseDown}\n                onMouseEnter={this.handleMouseEnter}\n            />\n        ));\n\n        return (\n            <div className='stickers-picker'>\n                <StickersPickerHeader onSelect={this.handleSelectSet} stickers={headerStickers} />\n                <div ref={this.scrollRef} className='stickers-picker-scroll' onScroll={this.handleScroll}>\n                    {items}\n                </div>\n            </div>\n        );\n    }\n}\n\nStickersPicker.propTypes = {\n    onSelect: PropTypes.func.isRequired,\n    onPreview: PropTypes.func.isRequired\n};\n\nexport default StickersPicker;\n","/*\n *  Copyright (c) 2018-present, Evgeny Nadymov\n *\n * This source code is licensed under the GPL v.3.0 license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport React from 'react';\nimport classNames from 'classnames';\nimport { compose } from 'recompose';\nimport withStyles from '@material-ui/core/styles/withStyles';\nimport { withTranslation } from 'react-i18next';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport InsertEmoticonIcon from '@material-ui/icons/InsertEmoticon';\nimport { Picker as EmojiPicker } from 'emoji-mart';\nimport StickerPreview from './StickerPreview';\nimport StickersPicker from './StickersPicker';\nimport { isAppleDevice } from '../../Utils/Common';\nimport { loadStickerThumbnailContent, loadStickerSetContent } from '../../Utils/File';\nimport { EMOJI_PICKER_TIMEOUT_MS } from '../../Constants';\nimport ApplicationStore from '../../Stores/ApplicationStore';\nimport FileStore from '../../Stores/FileStore';\nimport LocalizationStore from '../../Stores/LocalizationStore';\nimport TdLibController from '../../Controllers/TdLibController';\nimport './EmojiPickerButton.css';\n\nconst styles = theme => ({\n    iconButton: {\n        margin: '8px 0px'\n    },\n    headerButton: {\n        borderRadius: 0,\n        flex: '50%'\n    },\n    pickerRoot: {\n        zIndex: theme.zIndex.modal,\n        width: 338,\n        overflowX: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n        color: theme.palette.text.primary,\n        borderRadius: theme.shape.borderRadius,\n        boxShadow: theme.shadows[8],\n        position: 'absolute',\n        bottom: 80,\n        display: 'none'\n    },\n    pickerRootOpened: {\n        display: 'block'\n    }\n});\n\nclass EmojiPickerButton extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            open: false,\n            tab: 0\n        };\n\n        this.emojiPickerRef = React.createRef();\n        this.stickersPickerRef = React.createRef();\n    }\n\n    componentDidMount() {\n        ApplicationStore.on('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.on('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    componentWillUnmount() {\n        ApplicationStore.removeListener('clientUpdateThemeChange', this.onClientUpdateChange);\n        LocalizationStore.removeListener('clientUpdateLanguageChange', this.onClientUpdateChange);\n    }\n\n    onClientUpdateChange = update => {\n        this.picker = null;\n    };\n\n    handleButtonMouseEnter = event => {\n        this.buttonEnter = true;\n        setTimeout(() => {\n            if (!this.buttonEnter) return;\n\n            this.updatePicker(true);\n            this.loadStickerSets();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    loadStickerSets = async () => {\n        if (this.sets) return;\n\n        this.stickerSets = await TdLibController.send({\n            '@type': 'getInstalledStickerSets',\n            is_masks: false\n        });\n\n        const promises = [];\n        this.stickerSets.sets.forEach(x => {\n            promises.push(\n                TdLibController.send({\n                    '@type': 'getStickerSet',\n                    set_id: x.id\n                })\n            );\n        });\n\n        this.sets = await Promise.all(promises);\n\n        const node = this.stickersPickerRef.current;\n\n        const store = FileStore.getStore();\n        const previewSets = this.sets.slice(0, 5).reverse();\n        previewSets.forEach(x => {\n            loadStickerSetContent(store, x);\n            node.loadedSets.set(x.id, x.id);\n        });\n\n        const previewStickers = this.sets.reduce((stickers, set) => {\n            if (set.stickers.length > 0) {\n                stickers.push(set.stickers[0]);\n            }\n            return stickers;\n        }, []);\n        previewStickers.forEach(x => {\n            loadStickerThumbnailContent(store, x);\n        });\n    };\n\n    handleButtonMouseLeave = () => {\n        this.buttonEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    tryClosePicker = () => {\n        const { sticker } = this.state;\n        if (this.paperEnter || this.buttonEnter || sticker) return;\n\n        this.updatePicker(false);\n    };\n\n    handlePaperMouseEnter = () => {\n        this.paperEnter = true;\n    };\n\n    handlePaperMouseLeave = () => {\n        this.paperEnter = false;\n        setTimeout(() => {\n            this.tryClosePicker();\n        }, EMOJI_PICKER_TIMEOUT_MS);\n    };\n\n    updatePicker = open => {\n        this.setState({ open });\n    };\n\n    handleEmojiClick = () => {\n        this.setState({ tab: 0 });\n    };\n\n    handleStickersClick = () => {\n        const stickersPicker = this.stickersPickerRef.current;\n        const { tab } = this.state;\n\n        stickersPicker.loadContent(this.stickerSets, this.sets);\n\n        this.setState({ tab: 1 });\n        if (tab === 1) {\n            stickersPicker.scrollTop();\n        }\n    };\n\n    handleStickerSend = sticker => {\n        if (!sticker) return;\n\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerSend',\n            sticker\n        });\n\n        this.updatePicker(false);\n    };\n\n    handleStickerPreview = sticker => {\n        this.setState({ sticker });\n        TdLibController.clientUpdate({\n            '@type': 'clientUpdateStickerPreview',\n            sticker\n        });\n\n        if (!sticker) {\n            this.tryClosePicker();\n        }\n    };\n\n    render() {\n        const { classes, theme, t } = this.props;\n        const { open, tab, sticker } = this.state;\n\n        if (open && !this.picker) {\n            const i18n = {\n                search: t('Search'),\n                notfound: t('NotEmojiFound'),\n                skintext: t('ChooseDefaultSkinTone'),\n                categories: {\n                    search: t('SearchResults'),\n                    recent: t('Recent'),\n                    people: t('SmileysPeople'),\n                    nature: t('AnimalsNature'),\n                    foods: t('FoodDrink'),\n                    activity: t('Activity'),\n                    places: t('TravelPlaces'),\n                    objects: t('Objects'),\n                    symbols: t('Symbols'),\n                    flags: t('Flags'),\n                    custom: t('Custom')\n                }\n            };\n\n            this.picker = (\n                <EmojiPicker\n                    ref={this.emojiPickerRef}\n                    set='apple'\n                    showPreview={false}\n                    showSkinTones={false}\n                    onSelect={this.props.onSelect}\n                    color={theme.palette.primary.dark}\n                    i18n={i18n}\n                    native={isAppleDevice()}\n                    style={{ width: 338, overflowX: 'hidden' }}\n                />\n            );\n\n            this.stickersPicker = (\n                <StickersPicker\n                    ref={this.stickersPickerRef}\n                    onSelect={this.handleStickerSend}\n                    onPreview={this.handleStickerPreview}\n                />\n            );\n        }\n\n        return (\n            <>\n                <link\n                    rel='stylesheet'\n                    type='text/css'\n                    href={theme.palette.type === 'dark' ? 'emoji-mart.dark.css' : 'emoji-mart.light.css'}\n                />\n                <IconButton\n                    className={classes.iconButton}\n                    aria-label='Emoticon'\n                    onMouseEnter={this.handleButtonMouseEnter}\n                    onMouseLeave={this.handleButtonMouseLeave}>\n                    <InsertEmoticonIcon />\n                </IconButton>\n                <div\n                    className={classNames(classes.pickerRoot, { [classes.pickerRootOpened]: open })}\n                    onMouseEnter={this.handlePaperMouseEnter}\n                    onMouseLeave={this.handlePaperMouseLeave}>\n                    <div className='emoji-picker-header'>\n                        <Button\n                            color={tab === 0 ? 'primary' : 'default'}\n                            className={classes.headerButton}\n                            onClick={this.handleEmojiClick}>\n                            {t('Emoji')}\n                        </Button>\n                        <Button\n                            color={tab === 1 ? 'primary' : 'default'}\n                            className={classes.headerButton}\n                            onClick={this.handleStickersClick}>\n                            {t('Stickers')}\n                        </Button>\n                    </div>\n                    <div className={classNames('emoji-picker-content', { 'emoji-picker-content-stickers': tab === 1 })}>\n                        {this.picker}\n                        {this.stickersPicker}\n                    </div>\n                    {Boolean(sticker) && <StickerPreview sticker={sticker} />}\n                </div>\n            </>\n        );\n    }\n}\n\nconst enhance = compose(\n    withStyles(styles, { withTheme: true }),\n    withTranslation()\n);\n\nexport default enhance(EmojiPickerButton);\n"],"sourceRoot":""}